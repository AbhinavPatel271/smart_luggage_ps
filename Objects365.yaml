# Ultralytics 🚀 AGPL-3.0 License - https://ultralytics.com/license

# Objects365 dataset https://www.objects365.org/ by Megvii
# Documentation: https://docs.ultralytics.com/datasets/detect/objects365/
# Example usage: yolo train data=Objects365.yaml
# parent
# ├── ultralytics
# └── datasets
#     └── Objects365  ← downloads here (712 GB = 367G data + 345G zips)

# Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..]
path: ../datasets/Objects365 # dataset root dir
train: images/train # train images (relative to 'path') 1742289 images
val: images/val # val images (relative to 'path') 80000 images
test: # test images (optional)

# Classes
names:
  0: Person
  1: Sneakers
  2: Other Shoes
  3: Hat
  4: Lamp
  5: Glasses
  6: Bottle
  7: Cup
  8: Handbag/Satchel
  9: Bracelet
  10: Plate
  11: Picture/Frame
  12: Helmet
  13: Book
  14: Gloves
  15: Storage box
  16: Boat
  17: Leather Shoes
  18: Flower
  19: Bench
  20: Potted Plant
  21: Bowl/Basin
  22: Flag
  23: Pillow
  24: Boots
  25: Vase
  26: Microphone
  27: Necklace
  28: Ring
  29: Wine Glass
  30: Belt
  31: Monitor/TV
  32: Backpack
  33: Umbrella
  34: Speaker
  35: Watch
  36: Tie
  37: Trash bin Can
  38: Slippers
  39: Bicycle
  40: Stool
  41: Barrel/bucket
  42: Sandals
  43: Basket
  44: Drum
  45: Pen/Pencil
  46: Wild Bird
  47: High Heels
  48: Guitar
  49: Carpet
  50: Cell Phone
  51: Bread
  52: Camera
  53: Canned
  54: Towel
  55: Stuffed Toy
  56: Candle
  57: Laptop
  58: Awning
  59: Bed
  60: Faucet
  61: Tent
  62: Mirror
  63: Sink
  64: Apple
  65: Air Conditioner
  66: Knife
  67: Hockey Stick
  68: Paddle
  69: Pickup Truck
  70: Fork
  71: Traffic Sign
  72: Balloon
  73: Tripod
  74: Spoon
  75: Clock
  76: Pot
  77: Cake
  78: Dining Table
  79: Hanger
  80: Blackboard/Whiteboard
  81: Napkin
  82: Other Fish
  83: Orange/Tangerine
  84: Toiletry
  85: Keyboard
  86: Tomato
  87: Lantern
  88: Fan
  89: Green Vegetables
  90: Banana
  91: Baseball Glove
  92: Airplane
  93: Mouse
  94: Train
  95: Pumpkin
  96: Soccer
  97: Skiboard
  98: Luggage
  99: Nightstand
  100: Tea pot
  101: Telephone
  102: Trolley
  103: Head Phone
  104: Sports Car
  105: Stop Sign
  106: Dessert
  107: Remote
  108: Refrigerator
  109: Oven
  110: Lemon
  111: Duck
  112: Baseball Bat
  113: Surveillance Camera
  114: Cat
  115: Jug
  116: Broccoli
  117: Piano
  118: Pizza
  119: Skateboard
  120: Surfboard
  121: Gun
  122: Skating and Skiing shoes
  123: Gas stove
  124: Donut
  125: Bow Tie
  126: Carrot
  127: Kite
  128: Strawberry
  129: Other Balls
  130: Shovel
  131: Pepper
  132: Computer Box
  133: Toilet Paper
  134: Cleaning Products
  135: Chopsticks
  136: Microwave
  137: Pigeon
  138: Baseball
  139: Cutting/chopping Board
  140: Coffee Table
  141: Side Table
  142: Scissors
  143: Marker
  144: Pie
  145: Ladder
  146: Snowboard
  147: Cookies
  148: Radiator
  149: Fire Hydrant
  150: Basketball
  151: Zebra
  152: Grape
  153: Giraffe
  154: Potato
  155: Sausage
  156: Tricycle
  157: Violin
  158: Egg
  159: Fire Extinguisher
  160: Candy
  161: Fire Truck
  162: Billiards
  163: Converter
  164: Bathtub
  165: Wheelchair
  166: Golf Club
  167: Briefcase
  168: Cucumber
  169: Cigar/Cigarette
  170: Paint Brush
  171: Pear
  172: Hamburger
  173: Extractor
  174: Extension Cord
  175: Tong
  176: Tennis Racket
  177: Folder
  178: American Football
  179: Earphone
  180: Mask
  181: Kettle
  182: Tennis
  183: Ship
  184: Swing
  185: Coffee Machine
  186: Slide
  187: Carriage
  188: Onion
  189: Green beans
  190: Projector
  191: Frisbee
  192: Chicken
  193: Printer
  194: Watermelon
  195: Saxophone
  196: Tissue
  197: Toothbrush
  198: Ice cream
  199: Hot-air balloon
  200: Cello
  201: French Fries
  202: Scale
  203: Trophy
  204: Cabbage
  205: Hot dog
  206: Blender
  207: Peach
  208: Rice
  209: Wallet/Purse
  210: Volleyball
  211: Deer
  212: Goose
  213: Tape
  214: Tablet
  215: Cosmetics
  216: Trumpet
  217: Pineapple
  218: Golf Ball
  219: Mango
  220: Key
  221: Hurdle
  222: Fishing Rod
  223: Medal
  224: Flute
  225: Brush
  226: Penguin
  227: Megaphone
  228: Corn
  229: Lettuce
  230: Garlic
  231: Swan
  232: Green Onion
  233: Sandwich
  234: Nuts
  235: Induction Cooker
  236: Broom
  237: Trombone
  238: Plum
  239: Rickshaw
  240: Goldfish
  241: Kiwi fruit
  242: Router/modem
  243: Poker Card
  244: Toaster
  245: Shrimp
  246: Sushi
  247: Cheese
  248: Notepaper
  249: Cherry
  250: Pliers
  251: CD
  252: Pasta
  253: Hammer
  254: Cue
  255: Hami melon
  256: Flask
  257: Screwdriver
  258: Soap
  259: Recorder
  260: Board Eraser
  261: Coconut
  262: Tape Measure/Ruler
  263: Showerhead
  264: Globe
  265: Chips
  266: Steak
  267: Crosswalk Sign
  268: Stapler
  269: Pomegranate
  270: Dishwasher
  271: Crab
  272: Hoverboard
  273: Meatball
  274: Rice Cooker
  275: Tuba
  276: Calculator
  277: Papaya
  278: Antelope
  279: Parrot
  280: Seal
  281: Butterfly
  282: Dumbbell
  283: Electric Drill
  284: Hair Dryer
  285: Egg tart
  286: Jellyfish
  287: Treadmill
  288: Lighter
  289: Grapefruit
  290: Game board
  291: Mop
  292: Radish
  293: Baozi
  294: Target
  295: French
  296: Spring Rolls
  297: Monkey
  298: Rabbit
  299: Pencil Case
  300: Yak
  301: Red Cabbage
  302: Binoculars
  303: Asparagus
  304: Barbell
  305: Scallop
  306: Noodles
  307: Comb
  308: Dumpling
  309: Oyster
  310: Table Tennis paddle
  311: Cosmetics Brush/Eyeliner Pencil
  312: Chainsaw
  313: Eraser
  314: Lobster
  315: Durian
  316: Okra
  317: Lipstick
  318: Cosmetics Mirror
  319: Curling
  320: Table Tennis

# Download script/URL (optional) ---------------------------------------------------------------------------------------
download: |
  from tqdm import tqdm
  from ultralytics.utils.checks import check_requirements
  from ultralytics.utils.downloads import download
  from ultralytics.utils.ops import xyxy2xywhn
  import numpy as np
  from pathlib import Path
  from pycocotools.coco import COCO

  # Check Requirements
  check_requirements(('pycocotools>=2.0',))

  # Dataset directory setup
  dir = Path(yaml['path'])  # Dataset root dir
  for p in 'images', 'labels':
    (dir / p).mkdir(parents=True, exist_ok=True)
    for q in 'train', 'val':
      (dir / p / q).mkdir(parents=True, exist_ok=True)

  # Number of images you want
  train_images_needed = 10000
  val_images_needed = 1000

  # Function to estimate number of images in a patch (based on your previous check)
  def estimate_images_in_patch(patch_dir):
    return len([f for f in os.listdir(patch_dir) if f.endswith('.jpg')])

  # Calculate patches required
  train_patch_count = 0
  val_patch_count = 0
  train_images_processed = 0
  val_images_processed = 0

  # Train Split (Estimate the number of patches for 10k images)
  train_patches = []
  for i in range(50):  # Assuming there are 50 patches for training
    patch_dir = dir / 'images' / 'train' / f'patch{i}'
    num_images_in_patch = estimate_images_in_patch(patch_dir)
    train_images_processed += num_images_in_patch
    train_patches.append(patch_dir)
    if train_images_processed >= train_images_needed:
      break

  # Val Split (Estimate the number of patches for 1k images)
  val_patches = []
  for i in range(43):  # Assuming there are 43 patches for validation
    patch_dir = dir / 'images' / 'val' / f'patch{i}'
    num_images_in_patch = estimate_images_in_patch(patch_dir)
    val_images_processed += num_images_in_patch
    val_patches.append(patch_dir)
    if val_images_processed >= val_images_needed:
      break

  # Train, Val Splits
  for split, patches in [('train', train_patches), ('val', val_patches)]:
    print(f"Processing {split} in {len(patches)} patches ...")
    images, labels = dir / 'images' / split, dir / 'labels' / split

    # Download
    url = f"https://dorc.ks3-cn-beijing.ksyun.com/data-set/2020Objects365%E6%95%B0%E6%8D%AE%E9%9B%86/{split}/"
    if split == 'train':
      download([f'{url}zhiyuan_objv2_{split}.tar.gz'], dir=dir)  # annotations json
      download([f'{url}patch{i}.tar.gz' for i in range(len(train_patches))], dir=images, curl=True, threads=8)
    elif split == 'val':
      download([f'{url}zhiyuan_objv2_{split}.json'], dir=dir)  # annotations json
      download([f'{url}images/v1/patch{i}.tar.gz' for i in range(len(val_patches))], dir=images, curl=True, threads=8)

    # Move Images
    for f in tqdm(images.rglob('*.jpg'), desc=f'Moving {split} images'):
      f.rename(images / f.name)  # move to /images/{split}

    # Labels Processing
    coco = COCO(dir / f'zhiyuan_objv2_{split}.json')
    names = [x["name"] for x in coco.loadCats(coco.getCatIds())]
    for cid, cat in enumerate(names):
      catIds = coco.getCatIds(catNms=[cat])
      imgIds = coco.getImgIds(catIds=catIds)
      for im in tqdm(coco.loadImgs(imgIds), desc=f'Class {cid + 1}/{len(names)} {cat}'):
        width, height = im["width"], im["height"]
        path = Path(im["file_name"])  # image filename
        try:
          with open(labels / path.with_suffix('.txt').name, 'a') as file:
            annIds = coco.getAnnIds(imgIds=im["id"], catIds=catIds, iscrowd=None)
            for a in coco.loadAnns(annIds):
              x, y, w, h = a['bbox']  # bounding box in xywh (xy top-left corner)
              xyxy = np.array([x, y, x + w, y + h])[None]  # pixels(1,4)
              x, y, w, h = xyxy2xywhn(xyxy, w=width, h=height, clip=True)[0]  # normalized and clipped
              file.write(f"{cid} {x:.5f} {y:.5f} {w:.5f} {h:.5f}\n")
        except Exception as e:
          print(e)